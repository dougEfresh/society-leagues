#spring.social.facebook.app-id=718371258272269
#facebook.appNamespace=leaguesdev
app.url=http://leaguesdev.societybilliards.com
#spring.social.facebook.app-secret=sucker

server.tomcat.compression=2048
server.tomcat.compressableMimeTypes=application/javascript,application/json,text/css,text/html,text/xml,text/plain
server.compression.enabled=true
server.compression.mime-types=text/html,text/css,application/json
server.compression.min-response-size=2048

spring.mvc.date-=yyyy-mm-dd
spring.jackson.date-format=yyyy-MM-ddTHH:mm:ss
spring.data.mongodb.database=leagues_dev
spring.data.mongodb.host=localhost

use-cache=true

spring.http.gzip.deflate-compression-level=9 # the level used for deflate compression (0-9)
spring.http.gzip.enabled=true # enable gzip filter support
spring.http.gzip.min-gzip-size=2048 # minimum content length required for compression to occur

client.api.team=BASIC
client.api.teamMatch=BASIC
client.api.user=FULL
client.api.playerResult=BASIC
client.api.season=BASIC
client.api.stat=BASIC
client.api.endpoint=http://leaguesdev.societybilliards.com/

stormpath.application.href = https://api.stormpath.com/v1/applications/6wQN9e3rcguISbkhQhchiT

stormpath.authorized.group.user=https://api.stormpath.com/v1/groups/1ndjArUjxohmMKVFu72AVd
stormpath.authorized.group.admin=https://api.stormpath.com/v1/groups/MIqXkZZN1pcgABhJl1Owz
stormpath.web.account.cookie.maxAge=2592000

tormpath.cache.manager = com.stormpath.sdk.servlet.cache.config.DefaultCacheManagerFactory

# The context-relative path to the login view:
#stormpath.web.login.uri = /login

# The default context-relative path where the user will be redirected after logging in:
#stormpath.web.login.nextUri = /

# The context-relative path that will log out the user if visited:
#stormpath.web.logout.uri = /logout

# The default context-relative path where the user will be redirected after logout:
#stormpath.web.logout.nextUri = /login?status=logout
#stormpath.web.logout.invalidateHttpSession = true
#stormpath.web.forgot.uri = /forgot
#stormpath.web.forgot.nextUri = /login?status=forgot
#stormpath.web.change.uri = /change
#stormpath.web.change.nextUri = /login?status=changed

# The context-relative path to the register ('new user') view:
#stormpath.web.register.uri = /register

# The default context-relative path where the user will be redirected after registering:
#stormpath.web.register.nextUri = /

# The context-relative path the user will visit when clicking a link in a verification email after registration
# If this page is not accessed with a ?sptoken=SP_TOKEN_VALUE query parameter, the user will be redirected to
# a page where they can enter their email address to have a verfication email resent to them.
#stormpath.web.verify.uri = /verify

# If verify is enabled, the login view will show a link to to a page where users will be able to have the account
# verification email re-sent to them.
# The email verification workflow still needs to be enabled in the Stormpath admin console for this to work.
#stormpath.web.verify.enabled = true

# The default context-relative path where the user will be redirected after successfully verifying their email address
# Note: it is *not safe* (insecure) to automatically login a user when they click an email link.
#stormpath.web.verify.nextUri = /login?status=verified

# This shows the view where a user can enter their email address to have a verification email re-sent to them.
#stormpath.web.sendVerificationEmail.uri = /sendVerificationEmail

# The context-relative path where an authenticated (already logged in) user will be redirected when attempting to
# access a url they are not allowed to access.
#stormpath.web.unauthorized.uri = /unauthorized

# The context-relative path an HTTP client may POST to obtain an access token.  The access token can be used by the
# client to authenticate subsequent HTTP requests:
#stormpath.web.accessToken.uri = /oauth/token
#stormpath.web.accessToken.validationStrategy = stormpath

#stormpath.web.idSite.enabled = false
#stormpath.web.idSite.register.uri = /#/register
#stormpath.web.idSite.forgot.uri = /#/forgot
#stormpath.web.idSite.result.uri = /idSiteResult
# empty property means use ID site defaults:
#stormpath.web.idSite.showOrganizationField =
# empty property means use ID site defaults:
#stormpath.web.idSite.useSubdomain =
# Inferred based on heuristics by default.  However if your application is not deployed to an apex domain, like
# myapp.com, you *must* specify your application's base domain, e.g. myapp.mycompany.com
#stormpath.web.application.domain =

#stormpath.web.saml.enabled = false
#stormpath.web.saml.result.uri = /samlResult

#stormpath.web.request.event.publisher = com.stormpath.sdk.servlet.event.impl.EventPublisherFactory
#stormpath.web.request.event.listener = com.stormpath.sdk.servlet.event.RequestEventListenerAdapter

# Registration form fields displayed in the register page.  The fields and optional
# field directives are specified as a comma-delimited list.  Currently supported field names:
#
# givenName - aka 'first name' in Western countries
# middleName
# surname - aka 'last name' in Western countries
# username
# email
# password
#
# Fields may also have directives in parenthesis immediately following the field name, that is:
#
# fieldName(directive1,directive2,...,directiveN)
#
# The currently supportive directives:
#
# required: the field must be populated before the form can be submitted
# password: the field is a password field (show stars instead of the raw password characters)
#
# Fields specified without a directive will be optional.
#
# Tip: re-ordering the field list will automatically re-order the fields in the view :)
#
#stormpath.web.register.form.fields = givenName, surname, email(required), password(required,password), confirmPassword(required,password)

#stormpath.web.account.cookie.name = account
#stormpath.web.account.cookie.comment = ${servletContext.sessionCookieConfig.comment}
#stormpath.web.account.cookie.domain = ${servletContext.sessionCookieConfig.domain}
#stormpath.web.account.cookie.maxAge = ${servletContext.sessionCookieConfig.maxAge}
#stormpath.web.account.cookie.path = ${servletContext.sessionCookieConfig.path}
# It is strongly recommended to set httpOnly to true to prevent browser JavaScript inspection of identity cookies:
#stormpath.web.account.cookie.httpOnly = true
# THE FOLLOWING SECURE RESOLVER SHOULD *ALWAYS* RETURN TRUE IN PRODUCTION, EVEN IN INTRANET/PRIVATE COMPANY APPS.
# A 'false' value *will* make your application vulnerable to identity hijacking attacks.
# The default implementation however allows localhost clients to use non-TLS connections for development
# convenience.  TLS is required for all other clients in order for the cookie to be set.
stormpath.web.account.cookie.secure.resolver = com.stormpath.sdk.servlet.config.SecureResolverFactory

stormpath.web.account.session.attribute.names = com.stormpath.sdk.account.Account, account

stormpath.web.account.jwt.resolver = com.stormpath.sdk.servlet.filter.account.config.JwtAccountResolverFactory
stormpath.web.account.jwt.factory = com.stormpath.sdk.servlet.filter.account.config.AuthenticationJwtFactoryFactory
# The account cookie is really just a wrapper for a JSON Web Token (JWT).  This next property defines how long the JWT
# itself (the cookie value, not the cookie) is usable before it must be discarded.  This value must always be positive
# (greater than zero) and, if stormpath.web.account.cookie.maxAge is greater than zero, it must be greater than or equal
# to the maxAge value as well.  The default value is your web app's session cookie max age if the max age is greater
# than zero. If your web app's session cookie max age is less than 1, the default is 259200 seconds (3 days).
#
# You only need to modify this value if 1) you do not configure your web app's session cookie max age AND 2) you want
# your users to be 'remembered' longer than 3 days.
#stormpath.web.account.jwt.ttl = ${servletContext.sessionCookieConfig.maxAge > 0 ? servletContext.sessionCookieConfig.maxAge : 259200}
#stormpath.web.account.jwt.signatureAlgorithm = HS256
#stormpath.web.account.jwt.signingKey.resolver = com.stormpath.sdk.servlet.filter.account.DefaultJwtSigningKeyResolver

# CSRF protection
#stormpath.web.csrf.token.manager = com.stormpath.sdk.servlet.csrf.config.CsrfTokenManagerFactory
#stormpath.web.csrf.token.ttl = 3600000
#stormpath.web.csrf.token.name = csrfToken
# 1 hour nonce cache for CSRF tokens:
#stormpath.web.nonce.cache.name = com.stormpath.sdk.servlet.nonces
#stormpath.cache.com.stormpath.sdk.servlet.nonces.ttl = 3600000

# =========== Servlet Request Behavior ========
#

#stormpath.web.request.factory = com.stormpath.sdk.servlet.filter.config.StormpathServletRequestFactoryFactory
#stormpath.web.request.client.attributeNames = client
#stormpath.web.request.application.attributeNames = application

# The next property controls the output of httpServletRequest.getRemoteUser() if the user is authenticated.
#
# The value can be one of: email, username, givenName, href or bypass:
#
# email:     getRemoteUser() will return account.getEmail();
# username:  returns account.getUsername();
# givenName: returns account.getGivenName();
# href:      returns account.getHref();
# bypass:    disables Stormpath behavior for this property and falls back to the Servlet Container's implementation.
#
#stormpath.web.request.remoteUser.strategy = username

# The next property controls the output of httpServletRequest.getUserPrincipal() if the user is authenticated.
#
# The value can be one of: account, email, username, givenName, href or bypass:
#
# account:   returns a com.stormpath.sdk.servlet.http.AccountPrincipal that represents the entire Account object
# email:     returns a com.stormpath.sdk.servlet.http.EmailPrincipal matching account.getEmail()
# username:  returns a com.stormpath.sdk.servlet.http.UsernamePrincipal matching account.getUsername()
# givenName: returns a com.stormpath.sdk.servlet.http.GivenNamePrincipal matching account.getGivenName()
# href:      returns a com.stormpath.sdk.servlet.http.HrefPrincipal matching account.getHref()
# bypass:    disables Stormpath behavior for this property and falls back to the Servlet Container's implementation.
#
#stormpath.web.request.userPrincipal.strategy = account

#stormpath.web.message.source = com.stormpath.sdk.servlet.i18n.DefaultMessageSource
#stormpath.web.locale.resolver = com.stormpath.sdk.servlet.i18n.DefaultLocaleResolver

# =========== Default Servlet Filter Configuration ==========
#

# The AccountResolverFilter determines which user account may be associated with an incoming request and then makes
# that account available for the duration of the request.  It does this by delegating lookup behavior to one or more
# configured Account Resolver implementations.  These implementations are defined by the following property convention:
#
# stormpath.web.account.resolvers.RESOLVER_NAME = RESOLVER_IMPLEMENTATION_FULLY_QUALIFIED_CLASS_NAME
#
# Where:
#   * RESOLVER_NAME is a simple name/alias to give to the resolver, for example, 'cookie' or 'header'
#   * RESOLVER_IMPLEMENTATION_FULLY_QUALIFIED_CLASS_NAME is the fully qualified class name of an implementation
#     implements the com.stormpath.sdk.servlet.http.Resolver interface (and returns com.stormpath.sdk.account.Account
#     instances).
#
# This convention defines the 'pool' of all available account resolvers.  The ones actually used in your application are
# defined by specifying a comma-delimited list of resolver names via the
# stormpath.web.account.resolvers property as described next.
#
# Resolver Order
#
# When a Resolver returns an Account instance, all remaining Resolvers are ignored.  Resolvers are invoked in the order
# that they are specified in the following comma-delimited list.  Be sure to specify resolver names in the
# order that you prefer request locations to be checked:
#stormpath.web.account.resolvers = header, cookie, session

# Authorization Header Account Resolver: inspects the HTTP 'Authorization' header using all
# available HTTP Authentication Schemes. Available schemes are defined by the following property name/value convention:
#
# stormpath.web.http.authc.schemes.SCHEME_NAME = SCHEME_IMPLEMENTATION_FULLY_QUALIFIED_CLASS_NAME
#
# See the default stormpath.web.http.authc.schemes.* properties below for examples.
#stormpath.web.account.resolvers.header = com.stormpath.sdk.servlet.filter.account.config.AuthorizationHeaderAccountResolverFactory

# Cookie Account Resolver: looks for a secure digitally signed cookie that contains the account's information.  The
# cookie itself is created and set by the stormpath.web.authc.saver.cookie implementation.
#stormpath.web.account.resolvers.cookie = com.stormpath.sdk.servlet.filter.account.config.CookieAccountResolverFactory

# Session Account Resolver: looks in an available HTTP session for the account.  This implementation does not create
# sessions - it will only look in the request's session if the session already exists.
#stormpath.web.account.resolvers.session = com.stormpath.sdk.servlet.filter.account.SessionAccountResolver

#stormpath.web.localhost.resolver = com.stormpath.sdk.servlet.util.IsLocalhostResolver

#stormpath.web.accessToken.authorizer = com.stormpath.sdk.servlet.filter.oauth.config.AccessTokenRequestAuthorizerFactory
# THE FOLLOWING SECURE RESOLVER MUST *ALWAYS* RETURN TRUE IN PRODUCTION, EVEN IN INTRANET/PRIVATE COMPANY APPS.
# This is required by the OAuth 2 specification: https://tools.ietf.org/html/rfc6749#section-3.2
# A 'false' value *will* make your application vulnerable to identity hijacking attacks.
# The default implementation however allows localhost clients to use non-TLS connections for development
# convenience.  TLS is required for all other clients in order for the request to be processed.
#stormpath.web.accessToken.authorizer.secure.resolver = com.stormpath.sdk.servlet.config.SecureResolverFactory
#stormpath.web.accessToken.origin.authorizer = com.stormpath.sdk.servlet.filter.oauth.config.OriginAccessTokenRequestAuthorizerFactory
#stormpath.web.accessToken.origin.authorizer.serverUriResolver = com.stormpath.sdk.servlet.filter.DefaultServerUriResolver
# the following value defaults to empty on purpose: this is only used for additional origin URIs that don't already match
# the server URI:
#stormpath.web.accessToken.origin.authorizer.originUris =

#stormpath.web.accessToken.authenticationRequestFactory = com.stormpath.sdk.servlet.filter.oauth.config.AccessTokenAuthenticationRequestFactoryFactory
#stormpath.web.accessToken.resultFactory = com.stormpath.sdk.servlet.filter.oauth.config.AccessTokenResultFactoryFactory
#stormpath.web.refreshToken.authenticationRequestFactory = com.stormpath.sdk.servlet.filter.oauth.config.RefreshTokenAuthenticationRequestFactoryFactory
#stormpath.web.refreshToken.resultFactory = com.stormpath.sdk.servlet.filter.oauth.config.RefreshTokenResultFactoryFactory

#stormpath.web.accountStoreResolver = com.stormpath.sdk.servlet.http.authc.DisabledAccountStoreResolver

#stormpath.web.authc.saver = com.stormpath.sdk.servlet.filter.account.config.AuthenticationResultSaverFactory

# The storage locations that should be used to save account state after successful authentication.
# The value must be the name of a name stormpath.web.authc.savers.NAME_HERE definition
#
# The value is a comma-delimited list of one or more of cookie, session, or disabled:
#
# cookie:   Store the account state in a cookie.  The cookie's settings are controlled by the
#           stormpath.web.account.cookie.* properties below.  The same cookie is read later when the
#           stormpath.web.account.resolvers property contains a 'cookie' value (without the quotes).
#
# session:  Store the account state in the servlet HTTP session.  This option will create a new HTTP session if one
#           does not yet exist.
#
# disabled: Do not store the account state during a request.  This is a good option if your server-side app
#           authenticates every request (for example, a REST API).
#
#stormpath.web.authc.savers = cookie
#stormpath.web.authc.savers.cookie = com.stormpath.sdk.servlet.filter.account.config.CookieAuthenticationResultSaverFactory
#stormpath.web.authc.unauthenticatedHandler = com.stormpath.sdk.servlet.filter.config.UnauthenticatedHandlerFactory
#stormpath.web.authc.usernamePasswordRequestFactory = com.stormpath.sdk.servlet.filter.config.UsernamePasswordRequestFactoryFactory
#stormpath.web.authc.savers.session = com.stormpath.sdk.servlet.filter.account.config.SessionAuthenticationResultSaverFactory

#stormpath.web.http.authc = com.stormpath.sdk.servlet.http.authc.config.HttpAuthenticatorFactory
# If you set the following value to false and the request must be authenticated, you *must* specify the
# 'authc' filter for the relevant path to enforce authentication.
#stormpath.web.http.authc.challenge = true
#stormpath.web.http.authc.schemes = basic, bearer
#stormpath.web.http.authc.schemes.basic = com.stormpath.sdk.servlet.http.authc.config.BasicAuthenticationSchemeFactory
#stormpath.web.http.authc.schemes.bearer = com.stormpath.sdk.servlet.http.authc.config.BearerAuthenticationSchemeFactory

#stormpath.web.authz.unauthorizedHandler = com.stormpath.sdk.servlet.filter.config.UnauthorizedHandlerFactory

#stormpath.web.filter.chain.resolver = com.stormpath.sdk.servlet.config.DefaultFilterChainResolverFactory

## ensure that access to assets required to render Stormpath views (login, registration, etc.)
## are always open, regardless of user configuration
#stormpath.web.uris./assets/css/stormpath.css = anon
#stormpath.web.uris./assets/css/custom.stormpath.css = anon
